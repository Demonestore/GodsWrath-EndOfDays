// File: Assets/Scripts/GodsWrathHUD.cs
// Minimal mobile-friendly HUD that pairs with GodsWrathCore.cs.
// - Creates Canvas + Buttons at runtime
// - Lets you pick God or Goro (owner only) and cast skills
// - Spawns test targets so you can see damage/freeze/prayer drain
// Requires: UnityEngine.UI (UGUI)

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class GodsWrathHUD : MonoBehaviour
{
    GodsWrathCore C => GodsWrathCore.I;

    // UI
    Canvas canvas;
    RectTransform root;
    Text statusText;
    Text logText;
    RectTransform skillGrid;

    GodsWrathCore.Unit selected;
    List<GodsWrathCore.Unit> dummies = new List<GodsWrathCore.Unit>();

    void Awake()
    {
        // Ensure EventSystem
        if (FindObjectOfType<EventSystem>() == null)
        {
            var es = new GameObject("EventSystem", typeof(EventSystem), typeof(StandaloneInputModule));
            DontDestroyOnLoad(es);
        }

        BuildCanvas();
    }

    void Start()
    {
        if (C == null)
        {
            Debug.LogError("GodsWrathCore not found in scene. Add GodsWrathCore.cs to an object first.");
            return;
        }

        // If owner units aren’t spawned yet, spawn them (for quick test)
        if (!C.units.Any(u => u.faction == GodsWrathCore.Faction.God || u.faction == GodsWrathCore.Faction.Goro))
        {
            var method = typeof(GodsWrathCore).GetMethod("DebugSpawnOwnerGodAndGoro", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            method?.Invoke(C, null);
        }

        // Select God by default (if owner), else first player unit
        selected = C.units.FirstOrDefault(u => u.faction == GodsWrathCore.Faction.God && C.IsOwner(u.accountId))
                ?? C.units.FirstOrDefault(u => u.isPlayerControlled)
                ?? C.units.FirstOrDefault();

        SpawnTestTargets();

        BuildTopBar();
        RebuildSkillButtons();
        C.OnLog += AppendLog;
        AppendLog("HUD ready.");
    }

    void Update()
    {
        if (selected != null)
        {
            statusText.text = $"{selected.name}  HP {Mathf.CeilToInt(selected.stats.hp)}/{Mathf.CeilToInt(selected.stats.maxHp)}  " +
                              $"Prayer {selected.stats.prayerPoints}  Rage {Mathf.RoundToInt(selected.stats.rage)}  " +
                              $"Move {selected.stats.baseMoveSpeed:0.0}  Hand x{selected.stats.handSpeedMult:0.00}";
        }
    }

    // ---------- Build UI ----------
    void BuildCanvas()
    {
        var goCanvas = new GameObject("HUD_Canvas");
        DontDestroyOnLoad(goCanvas);
        canvas = goCanvas.AddComponent<Canvas>();
        canvas.renderMode = RenderMode.ScreenSpaceOverlay;
        goCanvas.AddComponent<CanvasScaler>().uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
        goCanvas.AddComponent<GraphicRaycaster>();

        root = new GameObject("Root", typeof(RectTransform)).GetComponent<RectTransform>();
        root.SetParent(canvas.transform, false);
        root.anchorMin = Vector2.zero; root.anchorMax = Vector2.one;
        root.offsetMin = Vector2.zero; root.offsetMax = Vector2.zero;

        // Background (subtle)
        var bg = new GameObject("BG").AddComponent<Image>();
        bg.color = new Color(0,0,0,0.25f);
        var bgrt = bg.GetComponent<RectTransform>();
        bgrt.SetParent(root, false);
        bgrt.anchorMin = Vector2.zero; bgrt.anchorMax = Vector2.one;
        bgrt.offsetMin = Vector2.zero; bgrt.offsetMax = Vector2.zero;

        // Status text (top)
        statusText = NewText("Status", root, 18, TextAnchor.UpperLeft);
        var stRT = statusText.rectTransform;
        stRT.anchorMin = new Vector2(0,1); stRT.anchorMax = new Vector2(1,1);
        stRT.pivot = new Vector2(0,1);
        stRT.offsetMin = new Vector2(10, -40); stRT.offsetMax = new Vector2(-10, -10);
        statusText.text = "Status...";

        // Log (left)
        logText = NewText("Log", root, 14, TextAnchor.LowerLeft);
        var logRT = logText.rectTransform;
        logRT.anchorMin = new Vector2(0,0); logRT.anchorMax = new Vector2(0.6f,0.35f);
        logRT.offsetMin = new Vector2(10,10); logRT.offsetMax = new Vector2(-10,-10);
        logText.text = "Console:\n";

        // Skill buttons panel (right/bottom)
        var gridGO = new GameObject("SkillGrid", typeof(Image));
        skillGrid = gridGO.GetComponent<RectTransform>();
        skillGrid.SetParent(root, false);
        skillGrid.anchorMin = new Vector2(0.62f, 0.0f);
        skillGrid.anchorMax = new Vector2(1f, 0.55f);
        skillGrid.offsetMin = new Vector2(10, 10);
        skillGrid.offsetMax = new Vector2(-10, -10);
        gridGO.GetComponent<Image>().color = new Color(0,0,0,0.35f);
        var gridLayout = gridGO.AddComponent<GridLayoutGroup>();
        gridLayout.cellSize = new Vector2(220, 90);
        gridLayout.spacing = new Vector2(10,10);
        gridLayout.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
        gridLayout.constraintCount = 2;
    }

    void BuildTopBar()
    {
        // Unit switcher buttons (God/Goro if present)
        var bar = new GameObject("TopBar", typeof(RectTransform)).GetComponent<RectTransform>();
        bar.SetParent(root, false);
        bar.anchorMin = new Vector2(0.0f, 0.55f);
        bar.anchorMax = new Vector2(0.60f, 0.60f);
        bar.offsetMin = new Vector2(10, 0);
        bar.offsetMax = new Vector2(-10, 0);

        // Find owner God/Goro
        var god = C.units.FirstOrDefault(u => u.faction == GodsWrathCore.Faction.God && C.IsOwner(u.accountId));
        var goro = C.units.FirstOrDefault(u => u.faction == GodsWrathCore.Faction.Goro && C.IsOwner(u.accountId));

        if (god != null) NewButton("Play God (owner)", bar, () => { selected = god; RebuildSkillButtons(); });
        if (goro != null) NewButton("Play Goro (owner)", bar, () => { selected = goro; RebuildSkillButtons(); });

        NewButton("Spawn 3 more targets", bar, () => { SpawnExtraTargets(3); });
        NewButton("Heal Selected", bar, () => {
            if (selected == null) return;
            selected.stats.hp = selected.stats.maxHp;
            AppendLog($"{selected.name} healed.");
        });
    }

    // ---------- Skills ----------
    void RebuildSkillButtons()
    {
        foreach (Transform t in skillGrid) Destroy(t.gameObject);
        if (selected == null) return;

        // Basic attack(s)
        NewSkillBtn("Basic Overhand Smash", () => BasicAttack(1.0f));
        NewSkillBtn("Uppercut (launch)", () => BasicAttack(1.3f, uppercut:true));

        // AGS special (if equipped & rage full)
        if (selected.equippedWeapon != null && selected.equippedWeapon.id == "ags")
        {
            NewSkillBtn("AGS Special (slam)", () => {
                if (selected.stats.rage < selected.equippedWeapon.rageCost) { AppendLog("Need full rage for AGS special."); return; }
                var t = PickTargets(selected, 1);
                if (t.Count == 0) return;
                selected.stats.rage = 0f;
                // +50% acc, +5 damage boost (baked in as mult)
                C.BasicHit(selected, t[0], selected.equippedWeapon, baseMult: 2.0f);
                AppendLog("** AGS special! **");
            });
        }

        // Goro skills
        if (selected.faction == GodsWrathCore.Faction.Goro)
        {
            var ice = C.skills.FirstOrDefault(s => s.id == "goro_ice_barrage");
            var shd = C.skills.FirstOrDefault(s => s.id == "goro_shadow_barrage");
            if (ice != null) NewSkillBtn("Ice Barrage (OSRS)", () => CastSkill(ice));
            if (shd != null) NewSkillBtn("Shadow Barrage", () => CastSkill(shd));
        }

        // God skills (owner-only)
        if (selected.faction == GodsWrathCore.Faction.God && C.IsOwner(selected.accountId))
        {
            AddGodButton("God’s Earthquake", GodsWrathCore.GodSkillId.GodsEarthquake);
            AddGodButton("Tornadoes", GodsWrathCore.GodSkillId.Tornado);
            AddGodButton("Fire from Heaven", GodsWrathCore.GodSkillId.FireFromHeaven);
            AddGodButton("Lightning Strike", GodsWrathCore.GodSkillId.LightningStrike);
        }
    }

    void AddGodButton(string label, GodsWrathCore.GodSkillId id)
    {
        var s = C.skills.FirstOrDefault(x => x.id == "god_" + id);
        if (s != null) NewSkillBtn(label, () => CastSkill(s));
    }

    void BasicAttack(float mult, bool uppercut=false)
    {
        var t = PickTargets(selected, 1);
        if (t.Count == 0) return;
        var w = selected.equippedWeapon ?? C.weapons.FirstOrDefault(); // any weapon
        if (w == null)
        {
            // fallback virtual fist
            w = new GodsWrathCore.Weapon { id="fist", displayName="Fist", baseDamage=100f };
        }
        C.BasicHit(selected, t[0], w, mult);
        AppendLog(uppercut ? "Uppercut hit!" : "Overhand smash hit!");
        // Uppercut heavy knockback is visual; you can add physics here if you use Rigidbodies.
    }

    void CastSkill(GodsWrathCore.Skill s)
    {
        // Find up to s.maxTargets within s.radius (dummy spatial logic)
        var targets = PickTargets(selected, s.maxTargets);
        C.TryCastSkill(selected, s, targets);
        AppendLog($"Cast: {s.displayName} (targets: {targets.Count})");
    }

    List<GodsWrathCore.Unit> PickTargets(GodsWrathCore.Unit caster, int count)
    {
        // For this demo, just pick alive enemies (not same faction) among dummies
        var list = dummies.Where(u => u.isAlive).ToList();
        // If God/Goro, consider players/bosses as enemies; for demo we stored them as Boss
        return list.Take(Mathf.Max(0, count)).ToList();
    }

    // ---------- Test Targets ----------
    void SpawnTestTargets()
    {
        dummies.Clear();
        SpawnExtraTargets(5);
    }

    void SpawnExtraTargets(int n)
    {
        for (int i=0;i<n;i++)
        {
            var u = new GodsWrathCore.Unit {
                name = "Dummy " + (C.units.Count + 1),
                faction = GodsWrathCore.Faction.Boss, // hostile for demo
                isPlayerControlled = false,
                stats = new GodsWrathCore.StatBlock {
                    level=50, maxLevel=50,
                    hp=2000, maxHp=2000,
                    baseMoveSpeed=4f,
                    armor=50f
                }
            };
            C.units.Add(u);
            dummies.Add(u);
        }
        AppendLog($"+{n} targets spawned.");
    }

    // ---------- Small UI helpers ----------
    Text NewText(string name, Transform parent, int size, TextAnchor align)
    {
        var go = new GameObject(name, typeof(Text));
        var t = go.GetComponent<Text>();
        t.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
        t.fontSize = size;
        t.alignment = align;
        t.color = Color.white;
        t.raycastTarget = false;
        go.transform.SetParent(parent, false);
        return t;
    }

    Button NewButton(string label, Transform parent, Action onClick)
    {
        var go = new GameObject(label, typeof(Image), typeof(Button));
        go.transform.SetParent(parent, false);
        var img = go.GetComponent<Image>();
        img.color = new Color(0.2f,0.2f,0.2f,0.9f);
        var rt = go.GetComponent<RectTransform>();
        rt.sizeDelta = new Vector2(220, 90);
        rt.anchorMin = new Vector2(0,0.5f);
        rt.anchorMax = new Vector2(0,0.5f);

        var txt = NewText("Text", go.transform, 18, TextAnchor.MiddleCenter);
        var txtrt = txt.rectTransform; txtrt.anchorMin = Vector2.zero; txtrt.anchorMax = Vector2.one;
        txtrt.offsetMin = new Vector2(8,8); txtrt.offsetMax = new Vector2(-8,-8);
        txt.text = label;

        var btn = go.GetComponent<Button>();
        btn.onClick.AddListener(() => onClick?.Invoke());
        return btn;
    }

    void NewSkillBtn(string label, Action onClick)
    {
        NewButton(label, skillGrid, onClick);
    }

    void AppendLog(string s)
    {
        if (logText == null) return;
        const int maxChars = 1200;
        logText.text += s + "\n";
        if (logText.text.Length > maxChars)
        {
            logText.text = logText.text.Substring(logText.text.Length - maxChars);
        }
    }
}
